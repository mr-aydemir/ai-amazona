generator client {
  provider   = "prisma-client-js"
  engineType = "binary" // Use binary engine to avoid DLL locking issues on Windows
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(cuid())
  name                    String?
  email                   String         @unique
  phone                   String?
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    Role           @default(USER)
  preferredLocale         String         @default("tr")
  preferredCurrency       String         @default("TRY")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  resetToken              String?
  resetTokenExpiry        DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  accounts                Account[]
  addresses               Address[]
  cart                    Cart?
  orders                  Order[]
  reviews                 Review[]
  savedCards              SavedCard[]
  sessions                Session[]
  notifications           Notification[]
  favorites               Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id           String               @id @default(cuid())
  name         String // Default name (fallback)
  description  String // Default description (fallback)
  price        Float
  images       String
  categoryId   String
  slug         String?              @unique
  stock        Int                  @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  status       ProductStatus        @default(ACTIVE)
  cartItems    CartItem[]
  orderItems   OrderItem[]
  category     Category             @relation(fields: [categoryId], references: [id])
  reviews      Review[]
  translations ProductTranslation[]
  favorites    Favorite[]
}

model Category {
  id           String                @id @default(cuid())
  name         String                @unique // Default name (fallback)
  description  String? // Default description (fallback)
  image        String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  products     Product[]
  translations CategoryTranslation[]
}

model Order {
  id                     String           @id @default(cuid())
  userId                 String
  status                 OrderStatus      @default(PENDING)
  total                  Float
  stripePaymentId        String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  iyzicoConversationId   String?
  iyzicoErrorMessage     String?
  iyzicoPaymentId        String?
  iyzicoPaymentStatus    String?
  iyzicoToken            String?
  paidAt                 DateTime?
  saveCardRequested      Boolean?         @default(false)
  cardInfo               String?
  // Ödeme sırasında seçilen taksit sayısı
  installmentCount       Int?
  // Ek hizmet bedeli (taban para biriminde)
  serviceFee             Float?           @default(0)
  shippingCost           Float?           @default(0)
  shippingTrackingNumber String?
  shippingTrackingUrl    String?
  shippingCarrier        ShippingCarrier?
  shippingCity           String
  shippingCountry        String
  shippingEmail          String
  shippingFullName       String
  shippingPhone          String
  shippingPostalCode     String
  shippingState          String
  shippingStreet         String
  shippingTcNumber       String?
  // Payment currency snapshot
  paymentCurrency        String?
  paidAmount             Float?
  conversionRate         Float?
  rateTimestamp          DateTime?
  baseCurrencyAtPayment  String?
  user                   User             @relation(fields: [userId], references: [id])
  items                  OrderItem[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String // e.g., 'ORDER_SHIPPED', 'SYSTEM'
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  orderId   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  userId     String?
  guestName  String?
  guestEmail String?
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fullName   String   @default("")
  phone      String   @default("")
  tcNumber   String   @default("")
  user       User     @relation(fields: [userId], references: [id])
}

model SavedCard {
  id              String   @id @default(cuid())
  userId          String
  cardUserKey     String
  cardToken       String
  cardAlias       String
  cardFamily      String?
  cardAssociation String?
  cardType        String?
  binNumber       String?
  lastFourDigits  String?
  cardBankCode    String?
  cardBankName    String?
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, cardToken])
}

// User favorites (wishlist)
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model ProductTranslation {
  id          String   @id @default(cuid())
  productId   String
  locale      String // 'en', 'tr', etc.
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, locale])
}

model CategoryTranslation {
  id          String   @id @default(cuid())
  categoryId  String
  locale      String // 'en', 'tr', etc.
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
}

// Homepage banners/carousel slides
model Banner {
  id           String              @id @default(cuid())
  image        String
  linkUrl      String?
  active       Boolean             @default(true)
  sortOrder    Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  translations BannerTranslation[]
}

model BannerTranslation {
  id          String   @id @default(cuid())
  bannerId    String
  locale      String
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  banner      Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)

  @@unique([bannerId, locale])
}

// Site contact information (single record) with localized address
model ContactInfo {
  id           String                   @id @default(cuid())
  companyName  String?
  phone        String?
  email        String?
  iban         String?
  taxNumber    String?
  mernisNumber String?
  mapEmbed     String? // Map iframe URL or embed code
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  translations ContactInfoTranslation[]
}

model ContactInfoTranslation {
  id            String      @id @default(cuid())
  contactInfoId String
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id], onDelete: Cascade)
  locale        String
  address       String?

  @@unique([contactInfoId, locale])
}

// Contact messages submitted via public contact form
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String
  locale    String?
  createdAt DateTime @default(now())
  status    String   @default("NEW") // NEW, READ, ARCHIVED
}

// Removed OrderNotificationEmail model per new policy: admins receive notifications directly

// Static About page with localized rich text content
model AboutPage {
  id           String                 @id @default(cuid())
  slug         String                 @unique
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  translations AboutPageTranslation[]
}

model AboutPageTranslation {
  id          String    @id @default(cuid())
  aboutPageId String
  aboutPage   AboutPage @relation(fields: [aboutPageId], references: [id], onDelete: Cascade)
  locale      String
  contentHtml String?

  @@unique([aboutPageId, locale])
}

// Static Privacy page with localized rich text content
model PrivacyPage {
  id           String                   @id @default(cuid())
  slug         String                   @unique
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  translations PrivacyPageTranslation[]
}

model PrivacyPageTranslation {
  id            String      @id @default(cuid())
  privacyPageId String
  privacyPage   PrivacyPage @relation(fields: [privacyPageId], references: [id], onDelete: Cascade)
  locale        String
  contentHtml   String?

  @@unique([privacyPageId, locale])
}

// Static Cookies page with localized rich text content
model CookiePage {
  id           String                  @id @default(cuid())
  slug         String                  @unique
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  translations CookiePageTranslation[]
}

model CookiePageTranslation {
  id           String     @id @default(cuid())
  cookiePageId String
  cookiePage   CookiePage @relation(fields: [cookiePageId], references: [id], onDelete: Cascade)
  locale       String
  contentHtml  String?

  @@unique([cookiePageId, locale])
}

// Static Terms page with localized rich text content
model TermsPage {
  id           String                 @id @default(cuid())
  slug         String                 @unique
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  translations TermsPageTranslation[]
}

model TermsPageTranslation {
  id          String    @id @default(cuid())
  termsPageId String
  termsPage   TermsPage @relation(fields: [termsPageId], references: [id], onDelete: Cascade)
  locale      String
  contentHtml String?

  @@unique([termsPageId, locale])
}

// Static Distance Sales Agreement page with localized rich text content
model DistanceSalesPage {
  id           String                         @id @default(cuid())
  slug         String                         @unique
  createdAt    DateTime                       @default(now())
  updatedAt    DateTime                       @updatedAt
  translations DistanceSalesPageTranslation[]
}

model DistanceSalesPageTranslation {
  id                  String            @id @default(cuid())
  distanceSalesPageId String
  distanceSalesPage   DistanceSalesPage @relation(fields: [distanceSalesPageId], references: [id], onDelete: Cascade)
  locale              String
  contentHtml         String?

  @@unique([distanceSalesPageId, locale])
}

// Static Cancellation & Return Policy page with localized rich text content
model ReturnPolicyPage {
  id           String                        @id @default(cuid())
  slug         String                        @unique
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  translations ReturnPolicyPageTranslation[]
}

model ReturnPolicyPageTranslation {
  id                 String           @id @default(cuid())
  returnPolicyPageId String
  returnPolicyPage   ReturnPolicyPage @relation(fields: [returnPolicyPageId], references: [id], onDelete: Cascade)
  locale             String
  contentHtml        String?

  @@unique([returnPolicyPageId, locale])
}

// System currency settings
model SystemSetting {
  id                    Int       @id @default(autoincrement())
  baseCurrency          String    @default("TRY")
  currencyRefreshDays   Int       @default(1)
  lastRatesUpdateAt     DateTime? // En son kur güncelleme zamanı
  // Vergi ve kargo ayarları
  vatRate               Float     @default(0.1) // KDV oranı (örn. 0.18 = %18)
  shippingFlatFee       Float     @default(10) // Sabit kargo ücreti
  freeShippingThreshold Float     @default(0) // Ücretsiz kargo eşiği (0 ise devre dışı)
  showPricesInclVat     Boolean   @default(false) // Fiyatları KDV dahil gösterme seçeneği
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

// Exchange rates stored relative to baseCurrency
model ExchangeRate {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  rate      Float
  updatedAt DateTime @updatedAt
}

// Frequently Asked Questions (FAQ) with localized question and answer
model FAQ {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  sortOrder    Int              @default(0)
  active       Boolean          @default(true)
  translations FAQTranslation[]
}

model FAQTranslation {
  id        String   @id @default(cuid())
  faqId     String
  locale    String
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  faq       FAQ      @relation(fields: [faqId], references: [id], onDelete: Cascade)

  @@unique([faqId, locale])
}

enum Role {
  USER
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PAID
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum ShippingCarrier {
  ARAS
  DHL
  YURTICI
  SURAT
  PTT
  HEPSIJET
}
