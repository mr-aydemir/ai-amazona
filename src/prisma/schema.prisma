generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String      @id @default(cuid())
  name                    String?
  email                   String      @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    Role        @default(USER)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  resetToken              String?
  resetTokenExpiry        DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  accounts                Account[]
  addresses               Address[]
  cart                    Cart?
  orders                  Order[]
  reviews                 Review[]
  savedCards              SavedCard[]
  sessions                Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  images      String
  categoryId  String
  stock       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      ProductStatus @default(ACTIVE)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category      @relation(fields: [categoryId], references: [id])
  reviews     Review[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Order {
  id                   String      @id @default(cuid())
  userId               String
  status               OrderStatus @default(PENDING)
  total                Float
  stripePaymentId      String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  iyzicoConversationId String?
  iyzicoErrorMessage   String?
  iyzicoPaymentId      String?
  iyzicoPaymentStatus  String?
  iyzicoToken          String?
  paidAt               DateTime?
  saveCardRequested    Boolean?    @default(false)
  cardInfo             String?
  shippingCost         Float?      @default(0)
  shippingCity         String
  shippingCountry      String
  shippingEmail        String
  shippingFullName     String
  shippingPhone        String
  shippingPostalCode   String
  shippingState        String
  shippingStreet       String
  shippingTcNumber     String?
  user                 User        @relation(fields: [userId], references: [id])
  items                OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fullName   String   @default("")
  phone      String   @default("")
  tcNumber   String   @default("")
  user       User     @relation(fields: [userId], references: [id])
}

model SavedCard {
  id              String   @id @default(cuid())
  userId          String
  cardUserKey     String
  cardToken       String
  cardAlias       String
  cardFamily      String?
  cardAssociation String?
  cardType        String?
  binNumber       String?
  lastFourDigits  String?
  cardBankCode    String?
  cardBankName    String?
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, cardToken])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PAID
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}
